% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corplingr_word_ngram.R
\name{ngram_word_leipzig}
\alias{ngram_word_leipzig}
\title{Generate word ngram from Leipzig sentence-corpora}
\usage{
ngram_word_leipzig(input, gram_length = 2, split = "[^a-z-]+",
  case_insensitive = TRUE, sample_n = NULL)
}
\arguments{
\item{input}{sentence vector or any other character vectors}

\item{gram_length}{the length of the ngram as a single numeric vector (e.g., 3, 4, etc.)}

\item{split}{characters to be split from the input vectors. The default is \code{"[^a-z-]+"}, i.e. all non alphabetical characters and hypen (to maintain reduplication, etc.).}

\item{case_insensitive}{whether to ignore case when splitting the vectors (\code{TRUE} -- default) or not (\code{FALSE}).}

\item{sample_n}{the number of sentence lines to be used for generating the ngram. The default is \code{NULL}, thus using all the elements in \code{input} argument. If specified, used non-negative numbers and the ngram will be generated from the sampled elements.}
}
\value{
a list of two elements: (A) tibble consisting of (i) \code{ngram} and (ii) \code{n} (token frequencies); (B) tibble of wordlist from the \code{input} vector.
}
\description{
The function generates word ngram from input vector of texts. The function requires input-vector of sentences from the Leipzig Corpora as its elements. The sentences should begin and end with "SENT" element so as user can identify and remove ngram that cross the sentence boundary. This is important because the sentences in the Leipzig Corpora are not related to one another (i.e., randomised). The sentences are split into word tokens and the script generates the ngrams from these word vectors.
}
\examples{

# load the corplingr package
devtools::load_all("~/Documents/_my_r_packages/corplingr")

# load the .RData for the cleaned sentence corpora
load(corpus_cleaned_path[1])

# if it is a sentence-per-line input-vector, mark the element with "SENT"
sentence_cleaned <- paste("SENT", sentence_cleaned, "SENT", sep = " ")

# generate the ngram
ngram_out <- ngram_word_leipzig(input = sentence_cleaned, gram_length = 2, split = "[^a-z]+", case_insensitive = TRUE, sample_n = NULL)

}
