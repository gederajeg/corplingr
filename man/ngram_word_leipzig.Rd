% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corplingr_ngram_word_leipzig.R
\name{ngram_word_leipzig}
\alias{ngram_word_leipzig}
\title{Generate word ngram from Leipzig sentence-corpora}
\usage{
ngram_word_leipzig(corpus_vector, ngram_length = 2,
  regex_split = "[^a-z-]+", case_insensitive = TRUE, sample_n = NULL)
}
\arguments{
\item{corpus_vector}{sentence vector or any other character vectors.}

\item{ngram_length}{the length of the ngram as a single integer vector (e.g., 3, 4, etc.).}

\item{regex_split}{characters to be split from the input vectors. The default is \code{"[^a-z-]+"}, i.e. all non alphabetical characters and hypen (to maintain reduplication, etc.).}

\item{case_insensitive}{whether to ignore case when splitting the vectors (\code{TRUE} -- default) or not (\code{FALSE}).}

\item{sample_n}{the number of sentence lines to be used for generating the ngram. The default is \code{NULL}, thus using all the elements in \code{corpus_vector} argument. If specified, used non-negative numbers and the ngram will be generated from the sampled elements.}
}
\value{
a list of two elements: (A) tibble consisting of (i) \code{ngram} and (ii) \code{n} (token frequencies); (B) tibble of wordlist from the \code{corpus_vector} vector.
}
\description{
The function generates word ngram from input vector of texts. See \bold{Details}.
}
\details{
The function requires input-vector whose each element corresponds to one sentence or not (i.e., where one sentence is in fact split as two vector-elements).
    The source text can be from the sentence-based corpus like Leipzig Corpora, other text files where each line corresponds to sentence, and any other files that do not corresponds to the former.
    If the input is clearly consists of one-sentence per vector-element, it is suggested to append "SENT/SENTENCE" string in the beginning and end of the element; the script will include identifying such string and removing them when part of the ngram, indicating an ngram crossing the sentence boundary.
    This is important because, for instance, the sentences in the Leipzig Corpora are not related to one another (i.e., randomised).
    Based on this input, the function then splits the sentences into word tokens and generates the ngrams from these word vectors.
}
\examples{
\dontrun{
# load the corplingr package
devtools::load_all("~/Documents/_my_r_packages/corplingr")

# load the .RData for the cleaned sentence corpora
load(corpus_cleaned_path[1])

# if it is a sentence-per-line input-vector, mark the element with "SENT"
sentence_cleaned <- paste("SENT", sentence_cleaned, "SENT", sep = " ")

# generate the ngram
ngram_out <- ngram_word_leipzig(corpus_vector = sentence_cleaned,
                                ngram_length = 2,
                                regex_split = "[^a-z]+",
                                case_insensitive = TRUE,
                                sample_n = 2000)

}
}
